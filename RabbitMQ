RabbitMQ:  user ampqlib, a message broker with asynchronous and synchronous messages
help in communicating API's

There is 4 part/ steps in it/
Publisher
Exchange
Queue
Consumer

Publisher publish the message
const ampq = require('ampqlib');
make connection using ampq.connect('connection string')
create channel, using existing channel if is there 
use connection.createChannel(), once channel is there
create exchange using assertExchange and pass routing key(use for direct exchange, ingnored for fanout exchange)
and publish the message

in consumer side or microservice side
create connection => assertExchange with the same name => assert queues with routing keys 
and consume the message 

once after acknoleging the message, queue will remove that message, other wise it will be there always and whenever a new consumer will come, it will pass that message to it.

four type of Exchange is there:
Direct, work on routing key, route message using routing key to specefic queue
Fanout, work like broadcaster, will ignore the routing key
Header
