Advanced Message Queuing Protocol (AMQP)
RabbitMQ:  user amqplib, a message broker with asynchronous and synchronous messages
help in communicating API's

There is 4 part/ steps in it/
Publisher
Exchange
Queue
Consumer

Publisher publish the message
const ampq = require('amqplib');
make connection using amqp.connect('connection string')
create channel, using existing channel if is there 
use connection.createChannel(), once channel is there
create exchange using assertExchange and pass routing key(use for direct exchange, ingnored for fanout exchange)
and publish the message

connection = rabbit.connect('amqp://localhost');
connection.then(async (conn)=>{
   const channel = await conn.createChannel();
   await channel.assertExchange(EXCHANGE_NAME, EXCHANGE_TYPE);
   await channel.assertQueue(QUEUE_NAME);
   channel.bindQueue(QUEUE_NAME, EXCHANGE_NAME, KEY);
channel.sendToQueue(QUEUE_NAME, Buffer.from(number))
})


in consumer side or microservice side
create connection => assertExchange with the same name => assert queues with routing keys 
and consume the message 


const rabbit = require('amqplib');
const QUEUE_NAME = 'square';
connection = rabbit.connect('amqp://localhost');
connection.then(async (conn)=>{
   const channel = await conn.createChannel();
   channel.consume(QUEUE_NAME, (m)=>{
       const number = parseInt(m.content.toString())
       const square = number * number
       console.log(square)
       channel.ack(m)
   })
})

once after acknoleging the message, queue will remove that message, other wise it will be there always and whenever a new consumer will come, i
t will pass that message to it.

four type of Exchange is there:
Direct, work on routing key, route message using routing key to specefic queue
Fanout, work like broadcaster, will ignore the routing key
Header
For this kind of exchange, routing key is not consulted at all. Instead, it tries to match values in message headers. Since headers are key-value pairs, 
both key and value must match key-value specified in a binding.
Topic
Topic exchanges are similar to direct, but they use patterns instead of exact matching. Pattern is a list of words separated by dots - aaa.bbb.ccc. 
Similar to direct exchanges, pattern is not specified on exchange level, but for each of binding separately.
For example, if binding pattern is aaa.*, it will match messages with routing keys aaa.bbb, aaa.ccc, but not aaa.bbb.ccc. However, 
if pattern is aaa.#, it will also match aaa.bbb.ccc.

5. Dead Letter Exchanges - 
"Dead-letter exchanges in RabbitMQ are special exchanges where messages are routed when they cannot be delivered to their intended queue. 
They help in handling message failures by allowing you to inspect and reprocess undeliverable messages."
Messages from a queue can be "dead-lettered", which means these messages are republished to an exchange when any of the following four events occur.
The message is negatively acknowledged by an AMQP 1.0 receiver using the rejected outcome or by an AMQP 0.9.1 consumer using basic.reject or basic.
nack with requeue parameter set to false, or
The message expires due to per-message TTL, or
The message is dropped because its queue exceeded a length limit, or
The message is returned more times to a quorum queue than the delivery-limit.
If an entire queue expires, the messages in the queue are not dead-lettered.

message retries in RabbitMQ, you can use dead-letter exchanges to capture failed messages and implement retry logic. By configuring retry intervals and maximum retry attempts, 
you can ensure reliable message delivery and fault tolerance."


"To monitor RabbitMQ performance and health, you can use RabbitMQ's built-in management plugin for real-time monitoring. Additionally, integrating external tools like 
Prometheus and Grafana provides advanced metrics and alerts for comprehensive monitoring."
