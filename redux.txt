Redux store hold state of your application, your app should subscribe to store but app can not directly change the state of the store.

npm i redux react-redux @reduxjs/toolkit

taskActionTypes.js

export const ADD_TASK = 'ADD_TASK';
export const REMOVE_TASK = 'REMOVE_TASK';

taskAction.js

export const addTask = (task) => {
 return {
     type: ADD_TASK,
     payload: task
 }
}

export const RemoveTask = (taskID) => {
  return {
        type: REMOVE_TASK,
        payload: taskID
  }
}

taskReducer.js

export const reducer = (state: initialState, action){
    switch(action.type){
      case: 'ADD_TASK'
       return {
         ...state,
        tasks: [...state.tasks, action.payload]
       }
     case: 'REMOVE_TASK'
     return {
       ...state,
      tasks: state.tasks.filter(task => task.id != action.payload)
     }
    }
}


rootReduce.js
import {combineReducer} from 'redux';

export const rootReucer = combineReducer({taskReducer: reducer from taskReducer.js})

store.js

import {configureStore} from 'reduxjs/@toolkit';

const store = configureStore({reducer: rootreducer});
or 
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import rootReducer from './reducers';

const store = createStore(
  rootReducer,
  applyMiddleware(thunk)
);

Thunks are functions that return another function, giving you access to the dispatch function and the Redux store's getState method.
// thunk action creator
export const fetchUser(){
 return async (dispatch, getState) => {
   dispatch(fetchUserInProgress());
 try {
      const response = await axios.get('https://api.example.com/data');
      dispatch(fetchDataSuccess(response.data));
    } catch (error) {
      dispatch(fetchDataFailure(error.message));
    })
 }
}

Wrap the Root Component with Provider
index.js
import {Provider} from "react-redux";

<Provider store={store}>
<App />
</Provider>


useDispatch() and useSelector() from 'react-redux' inside the component;

const dispatch = useDispatch();
const tasks = useSelector(state => state.taskReducer.tasks)

now inside the handler dispatch action:
dispatch(addTask(task))
***************************************************************************
Testing thunk

// thunks.test.js
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import fetchMock from 'jest-fetch-mock';
import { fetchData } from './thunks';
import { fetchDataRequest, fetchDataSuccess, fetchDataFailure } from './actions';

const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

fetchMock.enableMocks();

describe('fetchData thunk', () => {
  beforeEach(() => {
    fetchMock.resetMocks();
  });

  it('dispatches fetchDataSuccess action after successful API request', async () => {
    const mockData = { id: 1, name: 'Example Data' };
    fetchMock.mockResponse(JSON.stringify(mockData));
    const expectedActions = [
      fetchDataRequest(),
      fetchDataSuccess(mockData)
    ];
    const store = mockStore();

    await store.dispatch(fetchData());
    expect(store.getActions()).toEqual(expectedActions);
  });

  it('dispatches fetchDataFailure action after failed API request', async () => {
    const errorMessage = 'Failed to fetch data';
    fetchMock.mockReject(new Error(errorMessage));
    const expectedActions = [
      fetchDataRequest(),
      fetchDataFailure(errorMessage)
    ];
    const store = mockStore();

    await store.dispatch(fetchData());
    expect(store.getActions()).toEqual(expectedActions);
  });
});

*****************************************************************************
Redux setup using useReducer and useContext.
App.js

function App(){
 const globalState = {
     tasks: []
 };
const AppContext = React.createContext();
const reducer = (stage= globalState, action) => {
   const {type, payload} = action;
  switch(type){
   case 'ADD_TASK'
    return {
       ...state,
        tasks: [...state.tasks, payload]
    }
  default:
   return state;
}
}

const [state, dispatch] = useReducer(reducer, globalState);
const store = {
  state, dispatch
};

<AppContext.Provider value={store}><App /><AppContext.Provider>

Inside component

const {stage, dispatch} = useConext(AppContext);

onSubmitHandler = () => {
  dispatch({type: 'ADD_TASK', payload: task})
}

}
